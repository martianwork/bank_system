import sqlite3 # импорт библиотеки для работы с базой данных SQLite
from sqlite3.dbapi2 import connect
import codecs
import csv

# Класс "Клиент банка"
class Customer:
  def __init__(self, id, name):
    self.id = id
    self.name = name

# Класс "Счет клиента в банке"
class Account:
  def __init__(self, id, open_date, customer, money_amount, currency, reward_program):
    self.id = id
    self.open_date = open_date
    self.customer = customer
    self.money_amount = money_amount
    self.currency = currency
    self.reward_program = reward_program # Ссылка на объект "бонусная программа"

# Класс "Бонусная программа"
class Reward_Program:
  def __init__(self, id, name, code, cashback_category):
     self.id = id
     self.name = name
     self.code = code
     self.cashback_category = cashback_category # Ссылка на объект "категория кэшбэка"

# Класс "Категория кэшбэка"
class Cashback_category:
  def __init__(self, id, name, code, value, description):
    self.id = id
    self.name = name
    self.code = code
    self.value = value
    self.description = description

# Список объектов класса "Клиент"
customers = []

# Список объектов класса "Счета клиентов"
accounts = []

# Список объектов класса "Категория кэшбэка"
сashback_categories = []

# Список объектов класс "Бонусная программа"
reward_programs = []

# Класс для работы с базой данных
class DB_Utils:
  def __init__(self): # конструктор класса
    self.db_filename = "bank.db"

  def connect(self): # подключение к БД
    self.connection = sqlite3.connect(self.db_filename)
    print("Соединение с базой данных установлено")

  def disconnect(self): # отключение от БД
    self.connection.close()
    print("Соединение с базой данных разорвано")

  # Создать таблицу "Клиенты банка"
  def customers_table_create(self):
    cursor = self.connection.cursor()
    cursor.execute('''
      CREATE TABLE IF NOT EXISTS Customers (
        id INTEGER PRIMARY KEY,
        name TEXT NOT NULL)
    ''')
    self.connection.commit()
    print("Таблица Customers успешно создана")

  # Вставить данные в таблицу клиентов банка
  def customers_table_insert(self):
    cursor = self.connection.cursor()
    cursor.execute('INSERT INTO Customers (id, name) VALUES (?, ?)', (1,'Lewie'))
    cursor.execute('INSERT INTO Customers (id, name) VALUES (?, ?)', (2,'Merrick'))
    cursor.execute('INSERT INTO Customers (id, name) VALUES (?, ?)', (3,'Arnaldo'))
    cursor.execute('INSERT INTO Customers (id, name) VALUES (?, ?)', (4,'Karrah'))
    cursor.execute('INSERT INTO Customers (id, name) VALUES (?, ?)', (5,'Morty'))
    cursor.execute('INSERT INTO Customers (id, name) VALUES (?, ?)', (6,'Rick'))
    cursor.execute('INSERT INTO Customers (id, name) VALUES (?, ?)', (7,'Amelia'))
    cursor.execute('INSERT INTO Customers (id, name) VALUES (?, ?)', (8,'Marla'))
    cursor.execute('INSERT INTO Customers (id, name) VALUES (?, ?)', (9,'Kelley'))
    cursor.execute('INSERT INTO Customers (id, name) VALUES (?, ?)', (10,'Lyon'))
    self.connection.commit()
    print("Таблица Customers успешно заполнена данными")

  # Запросить всех клиентов банка из БД
  def customers_table_select(self):
    cursor = self.connection.cursor()
    cursor.execute('SELECT * FROM Customers')
    customers_rows = cursor.fetchall()
    for row in customers_rows:
      customers.append(Customer(row[0], row[1]))
      
  # Создать таблицу "Счта клиентов"
  def accounts_table_create(self):
    cursor = self.connection.cursor()
    cursor.execute('''
      CREATE TABLE IF NOT EXISTS Accounts (
        id INTEGER PRIMARY KEY,
        open_date TEXT NOT NULL,
        customer_id INTEGER,
        money_amount REAL,
        currency TEXT,
        reward_program_id INTEGER)
    ''')
    self.connection.commit()
    print("Таблица Accounts успешно создана")

  # Заполнение таблицы "Счета клиентов" данными
  def accounts_table_insert(self):
    cursor = self.connection.cursor()
    cursor.execute('INSERT INTO Accounts (id, open_date, customer_id, money_amount, currency, reward_program_id) VALUES (?, ?, ?, ?, ?, ?)', (1,'21.04.2020',1,1000,'RUB',0))
    cursor.execute('INSERT INTO Accounts (id, open_date, customer_id, money_amount, currency, reward_program_id) VALUES (?, ?, ?, ?, ?, ?)', (2,'29.10.2021',2,20000,'EUR',1))
    cursor.execute('INSERT INTO Accounts (id, open_date, customer_id, money_amount, currency, reward_program_id) VALUES (?, ?, ?, ?, ?, ?)', (3,'11.05.2023',3,3000,'RUB',1))
    cursor.execute('INSERT INTO Accounts (id, open_date, customer_id, money_amount, currency, reward_program_id) VALUES (?, ?, ?, ?, ?, ?)', (4,'30.01.2019',4,100000,'USD',2))
    cursor.execute('INSERT INTO Accounts (id, open_date, customer_id, money_amount, currency, reward_program_id) VALUES (?, ?, ?, ?, ?, ?)', (5,'14.07.2018',5,200000,'RUB',3))
    cursor.execute('INSERT INTO Accounts (id, open_date, customer_id, money_amount, currency, reward_program_id) VALUES (?, ?, ?, ?, ?, ?)', (6,'19.09.2017',6,5000,'USD',5))
    cursor.execute('INSERT INTO Accounts (id, open_date, customer_id, money_amount, currency, reward_program_id) VALUES (?, ?, ?, ?, ?, ?)', (7,'09.02.2017',7,1500,'RUB',0))
    cursor.execute('INSERT INTO Accounts (id, open_date, customer_id, money_amount, currency, reward_program_id) VALUES (?, ?, ?, ?, ?, ?)', (8,'17.12.2016',8,2000,'RUB',4))
    cursor.execute('INSERT INTO Accounts (id, open_date, customer_id, money_amount, currency, reward_program_id) VALUES (?, ?, ?, ?, ?, ?)', (9,'22.11.2013',9,4500,'RUB',6))
    cursor.execute('INSERT INTO Accounts (id, open_date, customer_id, money_amount, currency, reward_program_id) VALUES (?, ?, ?, ?, ?, ?)', (10,'03.09.2010',10,6000,'RUB',1))
    self.connection.commit()
    print("Таблица Accounts успешно заполнена данными")

  # Запросить все счета клиентов из БД
  def accounts_table_select(self):
    cursor = self.connection.cursor()
    cursor.execute('SELECT * FROM Accounts')
    accounts = cursor.fetchall()
    return accounts
  
  # Создание таблицы для бонусных программ
  def reward_programs_table_create(self):
    cursor = self.connection.cursor()
    cursor.execute('''
      CREATE TABLE IF NOT EXISTS Reward_programs (
        id INTEGER PRIMARY KEY,
        name TEXT NOT NULL,
        code TEXT,
        cashback_category_id INTEGER)
    ''')
    self.connection.commit()
    print("Таблица Reward_programs успешно создана")

  # Вставка данных о бонусных программах для клиентов
  def reward_programs_table_insert(self):
    cursor = self.connection.cursor()
    cursor.execute('INSERT INTO Reward_programs (id, name, code, cashback_category_id) VALUES (?, ?, ?, ?)', (0,'Нет бонусной программы','EMPTY',0))
    cursor.execute('INSERT INTO Reward_programs (id, name, code, cashback_category_id) VALUES (?, ?, ?, ?)', (1,'Бонусы для автолюбителя','RA-TA-TA',3))
    cursor.execute('INSERT INTO Reward_programs (id, name, code, cashback_category_id) VALUES (?, ?, ?, ?)', (2,'Подарок на Новый Год!','SANTA',7))
    cursor.execute('INSERT INTO Reward_programs (id, name, code, cashback_category_id) VALUES (?, ?, ?, ?)', (3,'Подарок на день рождения!','PET_OWNER',2))
    cursor.execute('INSERT INTO Reward_programs (id, name, code, cashback_category_id) VALUES (?, ?, ?, ?)', (4,'C 8 марта','FASTFOOD_NYAM_NYAM',6))
    self.connection.commit()
    print("Таблица Reward_programs успешно заполнена данными")

  # Запросить данные о бонусных программах банка из БД
  def reward_programs_table_select(self):
    cursor = self.connection.cursor()
    cursor.execute('SELECT * FROM Reward_programs')
    reward_programs_rows = cursor.fetchall()
    for row in reward_programs_rows:
      for cashback_category in сashback_categories:
        if cashback_category.id == row[3]:
          reward_programs.append(Reward_Program(row[0],row[1],row[2],cashback_category))
          break

  # Создать таблицу "Категории кэшбэка"
  def cashback_categories_table_create(self):
    cursor = self.connection.cursor()
    cursor.execute('''
      CREATE TABLE IF NOT EXISTS Cashback_categories (
        id INTEGER PRIMARY KEY,
        name TEXT NOT NULL,
        code TEXT,
        value INTEGER,
        description TEXT)
    ''')
    self.connection.commit()
    print("Таблица Cashback_categories успешно создана")

  # Заполнение таблицы с категориями кэшбэка
  def cashback_categories_table_insert(self):
    cursor = self.connection.cursor()
    cursor.execute('INSERT INTO Cashback_categories (id, name, code, value, description) VALUES (?, ?, ?, ?, ?)', (0,'Нет кэшбэка','EMPTY',0,'Кэшбэк отключен'))
    cursor.execute('INSERT INTO Cashback_categories (id, name, code, value, description) VALUES (?, ?, ?, ?, ?)', (1,'Все покупки','ALL',1,'Кэшбэк на все покупки вне категорий'))
    cursor.execute('INSERT INTO Cashback_categories (id, name, code, value, description) VALUES (?, ?, ?, ?, ?)', (2,'Животные','PET',5,'Покупка зоотоваров и оплата услуг в вет.клиниках'))
    cursor.execute('INSERT INTO Cashback_categories (id, name, code, value, description) VALUES (?, ?, ?, ?, ?)', (3,'Топливо','FUEL',3,'Оплата топлива на заправках'))
    cursor.execute('INSERT INTO Cashback_categories (id, name, code, value, description) VALUES (?, ?, ?, ?, ?)', (4,'Спорттовары','SPORT',10,'Покупка в магазинах спорттоваров'))
    cursor.execute('INSERT INTO Cashback_categories (id, name, code, value, description) VALUES (?, ?, ?, ?, ?)', (5,'Аптеки','DRUGS',10,'Любые покупки в аптеках'))
    cursor.execute('INSERT INTO Cashback_categories (id, name, code, value, description) VALUES (?, ?, ?, ?, ?)', (6,'Фастфуд','FASTFOOD',5,'Покупка еды и напитков в кафе и ресторанах быстрого обслуживания'))
    cursor.execute('INSERT INTO Cashback_categories (id, name, code, value, description) VALUES (?, ?, ?, ?, ?)', (7,'Развлечения','FUN',5,'Театры музеи выставки концерты и мастерклассы'))
    self.connection.commit()
    print("Таблица Cashback_categories успешно заполнена данными")

  # Запросить данные о категориях кэшбэка из БД
  def cashback_categories_table_select(self):
    cursor = self.connection.cursor()
    cursor.execute('SELECT * FROM Cashback_categories')
    сashback_categories_rows = cursor.fetchall()
    for row in сashback_categories_rows:
      сashback_categories.append(Cashback_category(row[0], row[1], row[2], float(row[3]), row[4]))

# вывод всех клиентов
def display_all_customers():
  for customer in customers:
    print("ID клиента: " + str(customer.id) + " ФИО: " + customer.name)

# вывод всех категорий кэшбэка
def display_all_сashback_categories():
  for category in сashback_categories:
    print(
        "ID категории: " + str(category.id) + 
        ", Название: " + category.name +
        ", Код: " + category.code + 
        ", % кэшбэка: " + str(category.value) +
        ", Описание: " + category.description)

# вывод всех бонусных программ
def display_all_reward_programs():
  for reward_program in reward_programs:
    print(
        "ID бонусной программы: " + str(reward_program.id) + 
        ", Название: " + reward_program.name +
        ", Код: " + reward_program.code + 
        ", Категория кэшбэка: " +  reward_program.cashback_category.code)

def display_account(id):
  for account in accounts:
    if account.id == id:
      print("№ счета: " + account.id +
            ", дата открытия: " + account.open_date +
            ", клиент: " + account.customer.name +
            ", сумма на счете: " + str(account.money_amount) +
            ", валюта: " + account.currency)

# Импорт данных из файлов
def import_customer_data():
  customer_filename = "customer.csv"
  file_encoding = "utf-8"
  csv_dialect = "excel"
  with codecs.open(customer_filename, "r", file_encoding) as customer_file:
    file_reader = csv.reader(customer_file, csv_dialect)
    for row in file_reader:
      # работа с последовательностью данных, извлеченной из файла
      customers.append(Customer(row[0], row[1]))
    print("Данные из файла " + customer_filename + " успешно загружены")

def import_account_data():
  account_filename = "account.csv"
  file_encoding = "utf-8"
  csv_dialect = "excel"
  with codecs.open(account_filename, "r", file_encoding) as account_file:
    file_reader = csv.reader(account_file, csv_dialect)
    for row in file_reader:
      customer_id = row[2]
      for customer in customers:
        if (customer.id == customer_id):
          accounts.append(Account(row[0],row[1],customer,row[3],row[4]))
    print("Данные из файла " + account_filename + " успешно загружены")

def display_account_by_currency(currency):
  for account in accounts:
    if (account.currency == currency):
      display_account(account.id)


# вызовы функций
# import_customer_data()
# import_account_data()
# display_all_customers()
# while True:
# currency = input("Введите валюту для отображения счетов")
# display_account_by_currency(currency.strip())

db_utils = DB_Utils()
db_utils.connect()

# Создание таблиц
db_utils.customers_table_create()
db_utils.accounts_table_create()
db_utils.cashback_categories_table_create()
db_utils.reward_programs_table_create()

# Заполнение таблиц
db_utils.customers_table_insert()
db_utils.cashback_categories_table_insert()
db_utils.reward_programs_table_insert()
db_utils.accounts_table_insert()

# Вывод данных на экран
print("------------Данные о клиентах банка------------")
db_utils.customers_table_select()
display_all_customers()

print("-----------Данные о счетах клиентов-----------")
for account in (db_utils.accounts_table_select()):
  print(account)

print("----------Данные о категориях кэшбэка----------")
db_utils.cashback_categories_table_select()
display_all_сashback_categories()

print("---------Данные о бонусных программах----------")
db_utils.reward_programs_table_select()
display_all_reward_programs()

db_utils.disconnect()



